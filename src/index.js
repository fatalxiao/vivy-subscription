/**
 * @file index.js
 */

/**
 * Create Vivy subscription plugin
 * @returns {{onRegisterModel: onRegisterModel, onUnregisterModel: onUnregisterModel}}
 */
export default function VivySubscription() {

    // All unsubscriptions generated by subscriptions in models
    const unsubscriptions = {};

    /**
     * Register subscriptions in models
     * @param store {Object}
     * @param nameSpace {string}
     * @param subscriptions {Object}
     */
    function registerSubscriptions(store, nameSpace, subscriptions) {

        if (!store || !nameSpace || !subscriptions || subscriptions.length < 1) {
            return;
        }

        Object.entries(subscriptions)?.forEach(([key, subscription]) => {

            if (!unsubscriptions.hasOwnProperty(nameSpace)) {
                unsubscriptions[nameSpace] = {};
            }

            unsubscriptions[nameSpace][key] = subscription({
                history: store.history
            })(
                store.dispatch,
                store.getState
            );

        });

    }

    /**
     * Unregister subscriptions in models
     * @param store {Object}
     * @param nameSpace {string}
     * @param subscriptions {Object}
     */
    function unregisterSubscriptions(store, nameSpace, subscriptions) {

        if (!store || !nameSpace || !subscriptions || subscriptions.length < 1) {
            return;
        }

        Object.entries(subscriptions)?.forEach(([key, subscription]) => {
            unsubscriptions?.[nameSpace]?.[key]?.();
        });

    }

    return {

        /**
         * Register subscriptions when register a Vivy model
         * @param model {Object}
         * @param store {Object}
         */
        onRegisterModel: (model, store) => {

            if (!model || !store) {
                return;
            }

            const {nameSpace, subscriptions} = model;

            // Register subscriptions
            if (subscriptions && Object.keys(subscriptions).length > 0) {
                registerSubscriptions(store, nameSpace, subscriptions || {});
            }

        },

        /**
         * Unregister subscriptions when unregister a Vivy model
         * @param model {Object}
         * @param store {Object}
         */
        onUnregisterModel: (model, store) => {

            if (!model || !store) {
                return;
            }

            const {nameSpace, subscriptions} = model;

            // Unregister subscriptions
            if (subscriptions && Object.keys(subscriptions).length > 0) {
                unregisterSubscriptions(store, nameSpace, subscriptions || {});
            }

        }

    };

}
